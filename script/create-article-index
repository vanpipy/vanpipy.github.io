#!/usr/bin/env node

const fs = require('fs/promises');
const path = require('path');

const ROOT_PATH = path.resolve(__dirname, '..');
const NOTES_PATH = path.resolve(ROOT_PATH, 'notes');
const ARTICLES_PATH = path.resolve(ROOT_PATH, 'articles');
const FILENAME = path.resolve(__dirname, '../_data', 'quickentry.yml');

const collectPaths = async (paths = [], result = []) => {
    if (paths.length === 0) {
        return result
            .filter((each) => /\.md$/.test(each.path))
            .map((each) => ({
                name: each.name.replace('.md', ''),
                path: each.path.replace(ROOT_PATH, '.')
            }));
    }

    const target = paths.shift();
    const stat = await fs.lstat(target.path);
    const isDirectory = stat.isDirectory();

    if (isDirectory) {
        let targetFiles = await fs.readdir(target.path);
        console.log(`${target.path} is a directory ans has the files - ${targetFiles}`);
        targetFiles = targetFiles.map((name) => ({ name, path: path.resolve(target.path, name) }));
        return collectPaths([...paths, ...targetFiles], result);
    } else {
        console.log(`${target.path} is a file`);
        return collectPaths(paths, [...result, target]);
    }
};

const main = async () => {
    let notesPaths = await fs.readdir(NOTES_PATH);
    let articlesPaths = await fs.readdir(ARTICLES_PATH);
    notesPaths = notesPaths.map((name) => ({ name, path: path.resolve(NOTES_PATH, name) }));
    articlesPaths = articlesPaths.map((name) => ({ name, path: path.resolve(ARTICLES_PATH, name) }));
    const articles = await collectPaths([...notesPaths, ...articlesPaths]);
    const articlesStr = articles.reduce((result, each) => {
        result += `- name: ${each.name}\n  path: ${each.path}\n\n`;
        return result;
    }, '');
    await fs.writeFile(FILENAME, articlesStr);
};

main();
